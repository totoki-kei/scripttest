デフォルトのスクリプト仕様

* 識別子の形式
 [a-zA-Z#$%_][a-zA-Z0-9#$%_]*

一般的なプログラミング言語とほぼ同じ
ただし、記号として'#', '$', '%'を使用可能

* 構成要素

1. コメント
C言語の複数行コメント形式 /* ... */
コメント内のみ、ASCII範囲外の文字を使用可能
内部的には空白と同等に扱われる

2. ラベル
2-1. エントリポイント
サブルーチンまたはGotoによるジャンプに使用可能なラベル
'<' と '>' で囲まれた識別子

2-2. チェックポイント
FwdとRewによるジャンプ先に使用可能なラベル
'*' に続いた整数値

3. 即値
浮動小数点数を直接書くと、それがスタックに積まれる
push[...] と同一

4. 命令
識別子を直接書いた場合、命令として解釈される
命令の後ろに '[' と ']' で囲んだ文字列を置くと
その命令への追加パラメータ(属性)になる

属性文字列の解釈方法には以下のパターンがあり
どの解釈を行うかは命令によって異なる

属性を省略した場合、整数値-1が設定されているものとして解釈される
属性の省略に対応していない命令の場合、アクセス違反などにより
ホストプログラム自体が不正終了する可能性がある

4-1. 整数(Integer)
整数として解釈する
C言語同様の、"0"プリフィクスによる八進数と
"0x"プリフィクスによる十六進数に対応する

4-2. 実数(Float)
単精度浮動小数点数として解釈する

4-3. 比較演算子(Comparer)
二項比較演算子として解釈する
以下のパターンに対応する
	==	等価		
	!=	不等価		
	>	超過		
	>=	以上		
	<	未満		
	<=	以下		
	and	論理積		
	nand	論理積否定	
	or	論理和		
	nor	論理和否定	
	xor	排他的論理和
	nxor	排他的論理和否定

4-4. 数値属性(NumAttribute)
NaN等の数値の属性を表す文字列として解釈する

以下のパターンに対応する
	zero	ゼロ
	plus	正の値
	minus	負の値
	posinf	正の無限大
	neginf	負の無限大
	nan	非値(NaN)
各パターンは、先頭に "non-" を付けることで否定を指定できる(例：zero -> nonzero)

4-5. エントリポイント(EntryPoint)
gotoやcallのジャンプ先アドレスとして解釈する
整数(八進数、十六進数可)によるアドレス指定、またはエントリポイント名を設定する

4-6. プロパティ(Property)
値の設定と取得を行うための、入出力方向を表す文字列として解釈する
"get"を値の取得、"set"を値の設定とみなす

4-7. 文字列(String)
文字列リテラルとして解釈される
角括弧と中の文字列の間にある空白は自動でトリムされる
"..." または '...' で囲むことで空白も含めた文字列を設定可能
コメントと異なり、使用可能な文字種別はASCII範囲のみ

以下、属性の書き方と、実際に格納される文字列の対応を示す
	[aaa] => "aaa"
	[b b b] => "b b b"
	[  cc ] => "cc"
	[ "ddd "] => "ddd "


* 命令一覧

nop
スタック：変化なし
属性：未使用
	何も処理をしない

wait
スタック：変化なし
属性：整数(省略可)
	コードの実行を中断し、属性で指定された回数分だけRunの実行を無視する
	属性の値が負の値であった場合は0と見なされる

	例：
	　属性として3が指定されていた場合、この命令に到達した時点で
	ReturnState::Waitを返してスクリプとを中断する
	　その後、Thread::Runの呼び出し3回まではコードを実行することなく
	ReturnState::Waitを返却する
　　　さらにその後は、本命令の次の命令から実行を再開する

end
スタック：変化なし
属性：未使用
	スクリプトの実行を終了する
	コレが呼び出された場合、ThreadのエラーコードにErrorCode::ScriptHasFinishedを
	設定し、ReturnState::Endを返却する

goto
スタック：変化なし
属性：エントリポイント(必須)
	属性で指定されたアドレスに強制ジャンプする

OPMAPI(jump, opJmp);
スタック：変化なし
属性：整数(必須)
	属性で指定された命令の数だけ実行をスキップする
	属性は1以上でなければならず、そうでない場合はInvalidOpcodeエラーとなる

jump_eq, jump_neq, jump_gt, jump_geq, jump_lt, jump_leq
スタック： pop 2 / push 0
属性：整数(必須)
	スタックから2値をポップし、その2値の比較結果が真であった場合
	属性で指定された命令の数だけ実行をスキップする
	属性は1以上でなければならず、そうでない場合はInvalidOpcodeエラーとなる
	
	各命令における比較方法を以下に示す
	ここで、スタックトップの値をfirst, 2番目の値をsecondと表す
	 jump_eq	second == first
	 jump_neq	second != first
	 jump_gt	second > first
	 jump_geq	second >= first
	 jump_lt	second < first
	 jump_leq	second <= first

jump_zero, jump_nonzero, jump_pos, jump_neg
スタック： pop 2 / push 0
属性：整数(必須)
	スタックから値をポップし、その値が条件を満たしている場合
	属性で指定された命令の数だけ実行をスキップする
	属性は1以上でなければならず、そうでない場合はInvalidOpcodeエラーとなる
	
	各命令における比較方法を以下に示す
	ここで、スタックトップの値をnと表す
	 jump_zero	n == 0.0
	 jump_nonzero	n != 0.0
	 jump_pos	n > 0.0
	 jump_neg	n < 0.0

cmp
スタック： pop 2 / push 1
属性：比較演算子(必須)
	スタックから2値をポップし、属性で指定された演算子に基づいて比較を行い
	比較結果が真であった場合は1.0, そうでない場合は0.0をスタックにプッシュする
	属性が有効な比較演算子でなかった場合はInvalidOperatorエラーとなる

chk
スタック： pop 1 / push 1
属性：数値属性(必須)
	スタックから値をポップし、その値が属性で指定された数値属性に合致する場合は
	1.0を、そうでない場合は0.0をスタックにプッシュする
	属性が有効でなかった場合はInvalidOperatorエラーとなる

fwd, rew
スタック： 未使用
属性：整数(省略可)
	早送り(forward)、巻き戻し(rewind)を行う
	現在の命令アドレスから順方向/逆方向に対して、属性で指定された値を持った
	チェックポイントを探し、次に実行する命令とする
	属性値が省略され-1であった場合は、チェックポイントの値にかかわらず
	最も近いチェックポイントまで進める/戻す

	メモ：この命令は1命令コードずつチェックしながらジャンプするため低速である

add, sub, mul, div, mod
スタック： pop 1 / push 1
スタック： pop 2 / push 1 (属性省略時)
属性：実数(省略可)
	スタック上の値に対して四則演算(+剰余演算)を行い、結果をプッシュする
	属性が指定されている場合は、スタックトップを左辺、属性を右辺とする
	属性が省略された場合、スタック2番目の値を左辺、スタックトップを右辺とする
	
	modは、C言語のfmod関数を用いて浮動小数点の剰余を計算する

adds, muls
スタック： pop n+1 / push 1 (n : 属性値)
属性：整数(必須)
	スタックの値に対して、属性に指定された回数だけ連続加算/乗算を行う
	具体的には、以下の操作を属性に指定された回数だけ実施する
	 (1) スタックから値aをポップ
	 (2) スタックから値bをポップ
	 (3) a + b (または a * b) を計算し、結果をスタックにプッシュ
	属性は1以上でなければならず、そうでない場合はInvalidOpcodeエラーとなる
	
	メモ：「演算するスタック要素数」ではなく「演算回数」である点に注意する
	
neg
スタック： pop 0 / push 1
スタック： pop 1 / push 1 (属性省略時)
属性：実数(省略可)
	数値の符号を反転させる
	属性が指定されていた場合、属性値の符号を反転させた値をプッシュする
	省略されていた場合はスタックからポップした値の符号を反転させ、プッシュする

sin, cos, tan
スタック： pop 0 / push 1
スタック： pop 1 / push 1 (属性省略時)
属性：実数(省略可)
	三角関数の値(正弦、余弦、正接)を得る
	属性が指定されていた場合、属性値に関数を適用した値をプッシュする
	省略されていた場合はスタックからポップした値に適用する

sincos, cossin
スタック： pop 0 / push 2
スタック： pop 1 / push 2 (属性省略時)
属性：実数(省略可)
	単一の値についてsinとcosを同時に得る
	属性が指定されていた場合、属性値に関数を適用した値をプッシュする
	省略されていた場合はスタックからポップした値に適用する
	
	sincosは、スタックにsin(n) -> cos(n)の順にプッシュし、cosの値がトップに来る
	cossinは逆に、sinの値がスタックトップに来る

atan
スタック： pop 1 / push 1
スタック： pop 2 / push 1 (属性省略時)
属性：実数(省略可)
	atan2関数同様、xとyの値から逆正接を得る(cossin命令の逆演算といえる)
	属性が指定されている場合は、スタックトップをx、属性をyとする
	属性が省略された場合、スタック2番目の値をx、スタックトップをyとする

sqrt
スタック： pop 0 / push 1
スタック： pop 1 / push 1 (属性省略時)
属性：実数(省略可)
	平方根を得る
	属性が指定されていた場合、属性値の平方根をプッシュする
	省略されていた場合はスタックからポップした値の平方根をプッシュする

pow
スタック： pop 1 / push 1
スタック： pop 2 / push 1 (属性省略時)
属性：実数(省略可)
	累乗を得る
	属性が指定されている場合は、スタックトップを左辺、属性を右辺とする
	属性が省略された場合、スタック2番目の値を左辺、スタックトップを右辺とする

log, ln
スタック： pop 0 / push 1
スタック： pop 1 / push 1 (属性省略時)
属性：実数(省略可)
	自然対数または常用対数を得る
	属性が指定されていた場合、属性値の対数をプッシュする
	省略されていた場合はスタックからポップした値の対数をプッシュする

OPMAPI(len, opLen);
スタック： pop n / push 1 (n : 属性値)
属性：整数(必須)
	属性で指定された次元の、ユークリッド距離( sqrt(a^2 + b^2 +...) ) を計算する
	値は全てスタックから消費される
	属性は1以上でなければならず、そうでない場合はInvalidOpcodeエラーとなる

deg2rad, rad2deg
スタック： pop 0 / push 1
スタック： pop 1 / push 1 (属性省略時)
属性：実数(省略可)
	値を角度と見なし、度数法 <=> 弧度法の変換を行う
	属性が指定されていた場合、属性値を変換した値をプッシュする
	省略されていた場合はスタックからポップした値を変換しプッシュする

get
スタック： pop 0 / push 1
属性：整数(必須)
	属性値nについて、Stateの変数 #n の値を読み出し、スタックにプッシュする

set
スタック： pop 1 / push 0
属性：整数(必須)
	属性値nについて、Stateの変数 #n に、スタックからポップした値を設定する

vget
vset
スタック： pop m + 1 / push n (m, n : 対応する命令のpop/push数)
属性：未使用
	get, setと同様だが、取得先/設定先番地を属性ではなく
	スタックトップの値で決定する
	
	メモ：今後、get/set命令と統合する可能性あり

n
スタック： pop 0 / push 1
属性：数値属性(必須)
	属性で指定された属性を持った数値の代表値をスタックにプッシュする
	(例： pos => +1.0)
	属性が有効な値でなかった場合はInvalidOperatorエラーとなる
	
	この命令では、「non-」がつく否定形式を使うことはできない
	その場合もInvalidOperatorエラーとなる

dup
スタック： pop 1 / push n+1 (n : 属性値)
属性：整数(省略可)
	スタックトップを複製する
	属性が正の整数であった場合、その個数分だけ複製する
	属性が0または負出会った場合は1個のみ複製する

pop
スタック： pop n / push 0 (n : 属性値)
属性：整数(省略可)
	スタックから値をポップし削除する
	属性が正の整数であった場合、その個数分だけ削除する
	属性が0または負出会った場合は1個のみ削除する
	スタックフレームを超えて削除することはできない

clear
スタック： pop n / push 0 (n : 現在のスタック要素数)
属性：整数(省略可)
	現在のスタックフレームについて、全ての値を削除する

call
スタック： 未使用
属性：エントリポイント(必須)
	指定されたエントリポイントラベルをサブルーチンとして呼び出す

ret
スタック： 未使用
属性：未使用
	サブルーチンを終了し戻る
	もし現在の命令がサブルーチンとして実行されていなかった場合は
	スレッドを終了させる(endと同一作用)

enter, leave
スタック：pop n / push n (n : 属性値)
属性：整数(省略可)
	スタックフレームをプッシュ、またはポップする
	属性の整数により、フレーム間で引き継ぐスタック要素数を指定する
	その際、積まれている順番は維持される
	(属性が0未満の場合は0と見なす)

push
スタック：pop 0 / push 1
属性：実数(必須)
	属性の値をスタックにプッシュする

stklen
スタック：pop 0 / push 1
属性：未使用
	現在のスタック要素数を取得し、スタックにプッシュする

dadd, dsub, dmul, ddiv
スタック：変化なし
属性：整数(必須)
	属性の整数で指定された番地の変数間で、直接四則演算を行う
	属性値の ( n & 0xFF ) を非演算数、 ( (n & 0xFF00) >> 8 ) を演算する値とする
	
	メモ：仕様が変更される可能性あり(演算する2数と格納先を別にする、廃止、等)

