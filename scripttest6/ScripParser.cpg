// execute `caper.exe -c++ ScripParser.cpg ScripParser.h`

%namespace Scrip;
%recover error;
%allow_ebnf;
%smart_pointer<shared_ptr>; 

%token number<EvalValue>;
%token ident<String>;
%token op_add op_sub op_mul op_div;
%token op_assign;
%token op_equal op_differ op_less op_lesseq op_greater op_greatereq op_not;
%token paren_open paren_close;
%token brace_open brace_close;
%token dollar comma semicolon;
%token kwd_if kwd_else kwd_while kwd_continue kwd_break kwd_return;

Statement<Ast>
	: [EmptyStatement]    semicolon
	| [ExprStatement]     Expr(0) semicolon
	| [AssignStatement]   ident(0) op_assign Expr(1) semicolon
	| [BlockStatement]    brace_open Statement*(0) brace_close
	| [IfStatement]       kwd_if     paren_open Expr(0) paren_close Statement(1)
	| [ElseStatement]     kwd_else   Statement(0)
	| [WhileStatement]    kwd_while paren_open Expr(0) paren_close Statement(1)
	| [ContinueStatement] kwd_continue semicolon
	| [BreakStatement]    kwd_break semicolon
	| [ReturnStatement]   kwd_return semicolon
	| [ReturnStatement]   kwd_return Expr(0) semicolon
	;

Expr<Ast>
	: [Identity] Term(0)
	| [MakeAdd] Expr(0) op_add Term(1)
	| [MakeSub] Expr(0) op_sub Term(1)
	;

Term<Ast>
	: [Identity] Unit(0)
	| [MakeMul] Term(0) op_mul Unit(1)
	| [MakeDiv] Term(0) op_div Unit(1)
	;

Unit<Ast>
	: [Identity] number(0)
	| [Negate] op_sub Unit(0)
	| [MakeCall] ident(0) paren_open List(1) paren_close
	| [Variable] ident(0)
	| [Identity] paren_open Expr(0) paren_close
	;

List<Ast>
	: [EmptyList] 
	| [MakeList] Expr/comma(0)
	;

