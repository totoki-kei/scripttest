// サンプル1
// 


func sum(n) {
	// 静的フィールド
	// 実体はルートコンテキスト内に一意の名前で作成されたフィールド
	// (例えばこのcall_countは、「static@sum%call_count」みたいな(※ 一例))
	static call_count : 0;
	var result : 0;

	call_count = call_count + 1;

	// var add = func(x) { ... } のシンタックスシュガー
	func add(x) {
		result = result + x;
		return result;
	}

	while (1) {
		result = result + n;
		yield return result;
	}
}

// function call
print(sum(10)); // 10

// オブジェクトの作成
var b = new sum(3);
print(b.result);   // 3
print(b.add(20));  // 23 (3 + 20)
//print(b(3)); // invalid.

// スレッド(特殊なオブジェクト)の作成
var a = thread sum(0);
print(a(5));     // 5
print(a(10));    // 15 (5 + 10)
print(a.result); // 15
print(a.add(30));// 45 (15 + 30)
print(a.result); // 45

// 関数内静的メンバ
print(sum.call_count); // 3 : 関数コール時、オブジェクト生成時、スレッド生成時の3回分


// 再帰可能な関数
// 特殊フィールド名「$.fn」で自分自身にアクセスする
func fact(n) {
	if (n == 0) {
		return 0;
	} else {
		return n * $.fn(n - 1);
	}
}

// ブロックについて
// ただ { ... } で処理を囲むとブロックスコープを作る
// 内部処理的には、入った時にスタックフレームが作成され、脱出するときにスタックフレームが破棄される
// この中で宣言されたフィールドを親スコープから取得する方法はない
{
	var x;
	x = fact(5);
	print(x);
	return x;
}
// 文法的には、{ から } までで単一のステートメント扱い。
// ifなどは、処理内容として単一のステートメントのみを受け取るようにして、複文を使用したい場合は
// このブロックスコープを使用する。

// TODO: スタックフレームの作成・破棄は可能な限り高速にする



// 型について

// 整数型(int)
// 32ビットまたは64ビット整数
// bool型も兼ねる
{
	var i_0 : 0;
	var i_1 : 26;
	var i_2 : -49;
	var i_3 : true;  // 1
	var i_4 : false; // 0

	// 可能な演算
	// 四則演算
	// 比較演算
	// 論理演算(&&, ||, !)
	// ビット演算(&, |, ~, ^, <<, >>)
}

// 実数型(number)
// 倍精度IEEE754浮動小数点数
{
	var f_0 : 0.0; // 小数点のついた数は実数とする
	var f_1 : 2.3;
	var f_2 : .01; // 整数部は省略可能
	var f_3 : -204.11;

	// 可能な演算
	// 四則演算
	// 比較演算
}


// 文字列型
// シングルバイト文字列(std::string)
// 値のセマンティクスを持ちコピーや複製、組み立てや編集を可能にする
{
	var s_0 : ""; // 空文字列
	var s_1 : "abc";
	var s_2 : "あいうえお"; // ソースコードの文字コードで入る
	var s_3 : "\r\n\x20"; // 一般的なエスケープ処理が可能(別にまとめる)

	// 可能な演算
	// 連結(+) ... 別の記号を使うかも

	// 連結以外の操作(部分抽出、検索、など)は別途プロシージャで定義する。
}

// プロシージャ
// func キーワードを使って定義する。
// 定義はソースコード上で静的に行われ、動的に構築することはできない
// (引数にプロシージャを渡したり親コンテキストのフィールドを変更したりすることで動作を変えることは可能)
{
	var p_0 : func (x) { return x + 2; }; // 1引数プロシージャを定義
	var p_1 : func (n) { output("value = "); output(n); }; // 返す値がない場合はnullを返すプロシージャとなる

	// 宣言用シンタックスシュガー
	// このp_2プロシージャはp_0と同一の処理を行う
	// この宣言方式では末尾のセミコロンは不要とする
	func p_2(x) {
		return x + 2;
	}

	// 演算は特にサポートしない

	// 括弧書きで引数を与えることで呼び出す
	// 宣言の引数の数と比較し、与えられた実引数が足りなければnullで補い、余分であれば捨てる。
}


// オブジェクト
// プロシージャコールに「new」をつけることで作成する。

