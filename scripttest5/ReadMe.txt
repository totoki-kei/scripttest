# ScriptTest5


## やりたいこと

(いつもと変わらないけど)

同期的なスレッド実行(ファイバー)
-> 以前作ろうとしていたコードブロックベースのオブジェクト作成とかのアレ


ファイバーとオブジェクトの統合
-> ファイバー内ローカル変数はメンバ変数
-> というか通常のオブジェクトにスタックがくっついたのがファイバー、みたいな感じで



## 「プロシージャ」について
もはや関数と呼ぶにはあれな感じなのでプロシージャと呼ぶことにする(大して変わらん)
プロシージャのインスタンスは以下の要素を持つオブジェクトで表す
- プロシージャエントリポイント(コードリスト内の開始インデックス)
- 外部コンテキストへの参照(このプロシージャが所属しているオブジェクト)

たとえば以下のようなオブジェクト生成用プロシージャがあったとして

func a(x) {
	var ret = x * x;
	func fn() { return ret; }
}

(new a(10)).fn() と (new a(20)).fn() の戻り値は違う値になるわけだが
そのretを持つスコープ(すなわち生成されたオブジェクト)への参照を持っておく必要があるため。

プロシージャをそのまま呼ぶと、呼び出し元のオブジェクト内のコールスタック・環境にて実行される
呼び出し元オブジェクト内のコールスタックに戻りアドレスを積んで、処理スタックにスタックフレームを追加し
実行ポインタがプロシージャのエントリポイントに飛んで実行される。
プロシージャ脱出時はコールスタックから取り出した戻りアドレスに実行ポインタを戻しつつ処理スタックも巻き戻す。


## オブジェクトについて

オブジェクトは、「プロシージャを実行した時にスコープ内に発生した変数とかの残滓」みたいな感じ。

- オブジェクトの生成に使用されたプロシージャインスタンスへの参照
- 内部の変数(名前、値、可視性)のリスト

オブジェクトインスタンス作成時、対象の


## ファイバー(スレッド？)について

ファイバーは実行状態を内部に持つ特殊なオブジェクト。
たぶんこの言語処理系で一番重いインスタンスになる。

- ファイバーの生成に使用されたプロシージャインスタンスへの参照
- 内部の変数(名前、値、可視性)のリスト
- 実行状態(計算スタック、コールスタック、プロシージャインデックス)



## プロシージャじゃなくて何と呼ぶべきか？

・サブルーチン(Sub)
・プロシージャ(Proc)
・メソッド(Method)

## 変数初期化構文
var x; // nullが代入された変数の宣言
var y : 20 // 20を初期値とした変数の宣言

イコールつなぎだとなんか紛らわしい感じがするのでコロンでつなぐ
(この辺なんかPSLっぽい)


## 変数の宣言方法の種類

1. var宣言
普通の変数宣言。オブジェクトに関連付けられ、メンバとして公開される。

2. local宣言
varとほぼ同じだが、メンバとして公開されない点が異なる

3. static宣言
オブジェクトではなくプロシージャ自体に関連付けられる。
弩のプロシージャであろうと実体は自動的にルートコンテキストに作成される。


## 戯言

newやthreadを1記号に置き換えたら楽しくなるかな・・・？

